Introduction
============
This framework is a very young project, started on 12/16/2010 because of the
lack of spring-alike frameworks for php.

Performance *is* a concern, but not now, because the framework is still in
development. 

--------------------------------------------------------------------------------
Please see docs/examples/quickstart/example.php for a very basic example of use.
You can find a doctrine2 example in docs/examples/doctrine/example.php.
--------------------------------------------------------------------------------

Notes about the source:

* There is no official release yet! So expect changes and be patience, the
work will get done. Also, performance will eventually be taken care of.

* If you're wondering why the first comment of each source file is repeated,
it's because they're actually 2 different comments: one for the file, and one
for the class.
--------------------------------------------------------------------------------
Debugging, logging
==================

You need log4php (http://logging.apache.org/log4php/) if you want debugging
output from the container. Just make sure you copy it to the include_path and
Ding will pick it up from there.

This means that this is NOT A REQUIREMENT FOR A DEPLOY. It's not even a
requirement at develop time (except when you really want debug output).
You can use the included example of a log4php.properties file in
docs/examples/quickstart.

Of course it is recommended that you do not set DEBUG output in your log4php
configuration (or remove it from the include path so Ding will notice and not
use it). This *will* create a difference in performance.
--------------------------------------------------------------------------------
CACHE
=====
Ding supports this cache implementations out of the box.
* APC.
* File.
* Zend Cache.
* Memcache through memcached php extension (needs libmemcached).
* DUMMY.

Each one of the implementations can be used for bean caching, beandefinition
caching, or proxy caching.

YOU MUST CONFIGURE THIS PROPERTY in the container, i.e:
        'ding' => array(
            'cache' => array(
    			'proxy' => array('directory' => '/tmp/Ding/proxy'),
//        		'bdef' => array('impl' => 'zend', 'zend' => $zendCacheOptions),
        		'bdef' => array('impl' => 'apc'),
//        		'bdef' => array('impl' => 'memcached', 'memcached' => $memcachedOptions),
                'beans' => array('impl' => 'dummy')
            )
        )
    	(when instantiating the container).
--------------------------------------------------------------------------------
DI
==
* Import other beans.xml files anywhere inside your already existant files. This
let you split your beans among several configuration files.
* Setter injection (php evaluated code, arrays, values, and/or references to
 other beans).
* Constructor injection (php evaluated code, arrays, values, and/or references
 to other beans).
* A bean can be: singleton or prototype (multiple instances).
* Can create beans by specifying a static method of the bean class itself.
* Can create beans by specifying another bean (and its method) as a factory.
* Properties for your beans.xml, like: ${log.dir}/alog.log
* Optional init-method will be called right after assembling a bean.
* Optional destroy-method will be called when the container is shutting down.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
AOP
===
In order to make aspects work, there's some kind of interceptors implementation.
Currently, there are 2 available interceptors:

* IMethodInterceptor: Implement this one to be called before every method
 execution (use proceed() to continue the chained execution), resuming your
 own afterwards.
* IExceptionInterceptor: Implement this one to be called when an aspected
 method throws an exception.
* Filesystem cache for autogenerated proxies.
--------------------------------------------------------------------------------
MVC
===
The mvc is work in progress, but you can sneak peek it in docs/examples/mvc. 
You will need a rewrite rule, like: 

url.rewrite-once = ( "^/(.*)" => "/example.php" ) // for lighttpd

Apache's mod_rewrite should be pretty much the same thing. The objective is
to send everything (literally) to 1 file, that is also the '/' of your
virtualhost.

The example is mapped to /Some/Mapped/Path/MyController/some (hint: try it with
?a=b). If you press the button, the form will be submitted and handled by another
action that will print the same data, but now for the post instead of the
initial get.

Also, if you want to trigger an exception to see the exception handler in
action, point your browser to: /Some/Mapped/Path/MyController/someException

To try a redirect (no view render, just headers sent), point your browser to 
/Some/Mapped/Path/MyController/redirect

--------------------------------------------------------------------------------
ErrorHandling
=============
You can configure the optional bean ErrorHandler using the class
Ding\Helpers\ErrorHandler\ErrorHandlerHelper to quickly implement an error
handler for your app, see the examples.
--------------------------------------------------------------------------------
SignalHandling
==============
You can configure the optional bean SignalHandler using the class
Ding\Helpers\SignalHandler\SignalHandlerHelper to quickly implement a signal
handler for your app, see the examples. You will need declare(ticks=1) as the
first line of your script.
--------------------------------------------------------------------------------
ShutdownHandling
================
You can configure the optional bean ShutdownHandler using the class
Ding\Helpers\ShutdownHandler\ShutdownHandlerHelper to quickly implement a 
shutdown handler for your script via register_shutdown_function().
--------------------------------------------------------------------------------
HttpSession
===========
A helper so you can access the session from the mvc. You can setAttribute()'s
and getAttribute()'s, destroy() it, etc. See the mvc example.
--------------------------------------------------------------------------------
Integration with other frameworks
=================================
See our doctrine2 integration:
https://github.com/marcelog/Ding/tree/master/docs/examples/doctrine
--------------------------------------------------------------------------------
Developers
==========
* build.xml is a phing build file, not ant.
* It's very possible that you may need to edit build.properties.
* Available main targets: all, build, test, report.
* Tools run: phpdoc, phploc, phpcs, phpmd, phpcpd, phpdepend, phpunit.
--------------------------------------------------------------------------------

 Collaborators:
 ============
agvstin | agu.gutierrez@gmail.com
